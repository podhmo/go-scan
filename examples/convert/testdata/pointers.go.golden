// Code generated by convert. DO NOT EDIT.
package pointers

import (
	"context"
	"errors"
	"fmt"

	"github.com/podhmo/go-scan/examples/convert/model"
)

func convertSrcToDst(ctx context.Context, ec *model.ErrorCollector, src *Src) *Dst {
	if src == nil {
		return nil
	}
	dst := &Dst{}
	if ec.MaxErrorsReached() {
		return dst
	}
	ec.Enter("Items")
	dst.Items = func() []*DstItem {
		convertedSlice := make([]*DstItem, len(src.Items))
		for i, item := range src.Items {
			ec.Enter(fmt.Sprintf("[%d]", i))
			convertedSlice[i] = convertSrcItemToDstItem(ctx, ec, item)
			ec.Leave()
		}
		return convertedSlice
	}()

	ec.Leave()
	if ec.MaxErrorsReached() {
		return dst
	}
	ec.Enter("ItemsPtr")
	if src.ItemsPtr != nil {
		tmp := func() []DstItem {
			convertedSlice := make([]DstItem, len((*src.ItemsPtr)))
			for i, item := range *src.ItemsPtr {
				ec.Enter(fmt.Sprintf("[%d]", i))
				convertedSlice[i] = *convertSrcItemToDstItem(ctx, ec, &item)
				ec.Leave()
			}
			return convertedSlice
		}()
		dst.ItemsPtr = &tmp
	} else {
		dst.ItemsPtr = nil
	}

	ec.Leave()
	if ec.MaxErrorsReached() {
		return dst
	}
	ec.Enter("ItemsPtrPtr")
	if src.ItemsPtrPtr != nil {
		tmp := func() []*DstItem {
			convertedSlice := make([]*DstItem, len((*src.ItemsPtrPtr)))
			for i, item := range *src.ItemsPtrPtr {
				ec.Enter(fmt.Sprintf("[%d]", i))
				convertedSlice[i] = convertSrcItemToDstItem(ctx, ec, item)
				ec.Leave()
			}
			return convertedSlice
		}()
		dst.ItemsPtrPtr = &tmp
	} else {
		dst.ItemsPtrPtr = nil
	}

	ec.Leave()
	return dst
}

// ConvertSrcToDst converts Src to Dst.
func ConvertSrcToDst(ctx context.Context, src *Src) (*Dst, error) {
	if src == nil {
		return nil, nil
	}
	ec := model.NewErrorCollector(0)
	dst := convertSrcToDst(ctx, ec, src)
	if ec.HasErrors() {
		return dst, errors.Join(ec.Errors()...)
	}
	return dst, nil
}
func convertSrcItemToDstItem(ctx context.Context, ec *model.ErrorCollector, src *SrcItem) *DstItem {
	if src == nil {
		return nil
	}
	dst := &DstItem{}
	if ec.MaxErrorsReached() {
		return dst
	}
	ec.Enter("Value")
	dst.Value = src.Value

	ec.Leave()
	return dst
}

// ConvertSrcItemToDstItem converts SrcItem to DstItem.
func ConvertSrcItemToDstItem(ctx context.Context, src *SrcItem) (*DstItem, error) {
	if src == nil {
		return nil, nil
	}
	ec := model.NewErrorCollector(0)
	dst := convertSrcItemToDstItem(ctx, ec, src)
	if ec.HasErrors() {
		return dst, errors.Join(ec.Errors()...)
	}
	return dst, nil
}
