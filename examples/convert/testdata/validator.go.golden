
// Code generated by convert. DO NOT EDIT.
package validator

import (
	"context"
	"fmt"
	"strings"
	"errors"
	context "context"
	fmt "fmt"
)

// errorCollector collects errors with their field paths.
type errorCollector struct {
	errors []error
	path   []string
	max    int
}

func newErrorCollector(max int) *errorCollector {
	return &errorCollector{max: max}
}

func (ec *errorCollector) Add(field string, err error) {
	if ec.max > 0 && len(ec.errors) >= ec.max {
		return
	}
	path := strings.Join(append(ec.path, field), ".")
	ec.errors = append(ec.errors, fmt.Errorf("field %q: %w", path, err))
}

func (ec *errorCollector) Enter(field string) {
	ec.path = append(ec.path, field)
}

func (ec *errorCollector) Leave() {
	if len(ec.path) > 0 {
		ec.path = ec.path[:len(ec.path)-1]
	}
}

func (ec *errorCollector) Errors() []error {
	return ec.errors
}

func (ec *errorCollector) HasErrors() bool {
	return len(ec.errors) > 0
}

func (ec *errorCollector) MaxErrorsReached() bool {
	return ec.max > 0 && len(ec.errors) >= ec.max
}

// ConvertSrcToDst converts Src to Dst.
func ConvertSrcToDst(ctx context.Context, src *Src) (*Dst, error) {
	if src == nil {
		return nil, nil
	}
	ec := newErrorCollector(0) // TODO: Get max_errors from annotation
	dst := convertSrcToDst(ctx, ec, src)
	if ec.HasErrors() {
		return &dst, errors.Join(ec.Errors()...)
	}
	return &dst, nil
}

// convertSrcToDst is a helper function for conversion.
func convertSrcToDst(ctx context.Context, ec *errorCollector, src *Src) Dst {
	dst := Dst{}
	if ec.MaxErrorsReached() {
		return dst
	}
	ec.Enter("Name")
	dst.Name = src.Name
	validateString(ec, dst.Name)
	ec.Leave()
	if ec.MaxErrorsReached() {
		return dst
	}
	ec.Enter("Bio")
	dst.Bio = src.Bio
	validateString(ec, dst.Bio)
	ec.Leave()
	if ec.MaxErrorsReached() {
		return dst
	}

	return dst
}
