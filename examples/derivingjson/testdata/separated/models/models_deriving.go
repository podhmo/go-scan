// Code generated by derivingjson for package models. DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
	"github.com/podhmo/go-scan/examples/derivingjson/testdata/separated/shapes"
)

func (s *Container) UnmarshalJSON(data []byte) error {
	var tempMap map[string]json.RawMessage
	if err := json.Unmarshal(data, &tempMap); err != nil {
		return fmt.Errorf("failed to unmarshal initial JSON object: %w", err)
	}

	rawContent, ok := tempMap["content"]
	if !ok || len(rawContent) == 0 || string(rawContent) == "null" {
		return nil
	}

	var discriminatorDoc struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(rawContent, &discriminatorDoc); err != nil {
		return fmt.Errorf("failed to unmarshal discriminator from 'content' (content: %s): %w", string(rawContent), err)
	}

	switch discriminatorDoc.Type {

	case "circle":
		var content shapes.Circle
		if err := json.Unmarshal(rawContent, &content); err != nil {
			return fmt.Errorf("failed to unmarshal 'content' as shapes.Circle for type 'circle': %w", err)
		}
		s.Content = &content

	case "rectangle":
		var content shapes.Rectangle
		if err := json.Unmarshal(rawContent, &content); err != nil {
			return fmt.Errorf("failed to unmarshal 'content' as shapes.Rectangle for type 'rectangle': %w", err)
		}
		s.Content = &content

	default:
		if discriminatorDoc.Type == "" {
			return fmt.Errorf("discriminator field 'type' missing in 'content' (content: %s)", string(rawContent))
		}
		return fmt.Errorf("unknown type '%s' for field 'content' (content: %s)", discriminatorDoc.Type, string(rawContent))
	}
	return nil
}
