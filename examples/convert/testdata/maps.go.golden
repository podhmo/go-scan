
// Code generated by convert. DO NOT EDIT.
package maps

import (
	"context"
	"fmt"
	context "context"
	fmt "fmt"
)

// ConvertSrcToDst converts Src to Dst.
func ConvertSrcToDst(ctx context.Context, src *Src) (*Dst, error) {
	if src == nil {
		return nil, nil
	}
	dst := &Dst{}
	{
	convertedMap := make(map[string]DstItem, len(src.Items))
	for key, value := range src.Items {
		{ conv, err := ConvertSrcItemToDstItem(ctx, &value); if err == nil { convertedMap[key] = *conv } }
	}
	dst.Items = convertedMap
}
	{
	convertedMap := make(map[string]*interface{}, len(src.ItemPtrs))
	for key, value := range src.ItemPtrs {
		convertedMap[key] = value // Cannot convert pointer types, element type is nil
	}
	dst.ItemPtrs = convertedMap
}
	return dst, nil // TODO: error handling
}
// ConvertSrcItemToDstItem converts SrcItem to DstItem.
func ConvertSrcItemToDstItem(ctx context.Context, src *SrcItem) (*DstItem, error) {
	if src == nil {
		return nil, nil
	}
	dst := &DstItem{}
	dst.Value = src.Value
	return dst, nil // TODO: error handling
}
