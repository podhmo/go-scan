// Code generated by minigo-gen-bindings. DO NOT EDIT.

package os

import (
	"os"
	"reflect"

	"github.com/podhmo/go-scan/minigo"
)

// Install binds all exported symbols from the "os" package to the interpreter.
func Install(interp *minigo.Interpreter) {
	interp.Register("os", map[string]any{
		"Args":                os.Args,
		"Chdir":               os.Chdir,
		"Chmod":               os.Chmod,
		"Chown":               os.Chown,
		"Chtimes":             os.Chtimes,
		"Clearenv":            os.Clearenv,
		"CopyFS":              os.CopyFS,
		"Create":              os.Create,
		"CreateTemp":          os.CreateTemp,
		"DevNull":             os.DevNull,
		"DirFS":               os.DirFS,
		"Environ":             os.Environ,
		"ErrClosed":           os.ErrClosed,
		"ErrDeadlineExceeded": os.ErrDeadlineExceeded,
		"ErrExist":            os.ErrExist,
		"ErrInvalid":          os.ErrInvalid,
		"ErrNoDeadline":       os.ErrNoDeadline,
		"ErrNotExist":         os.ErrNotExist,
		"ErrPermission":       os.ErrPermission,
		"ErrProcessDone":      os.ErrProcessDone,
		"Executable":          os.Executable,
		"Exit":                os.Exit,
		"Expand":              os.Expand,
		"ExpandEnv":           os.ExpandEnv,
		"FindProcess":         os.FindProcess,
		"Getegid":             os.Getegid,
		"Getenv":              os.Getenv,
		"Geteuid":             os.Geteuid,
		"Getgid":              os.Getgid,
		"Getgroups":           os.Getgroups,
		"Getpagesize":         os.Getpagesize,
		"Getpid":              os.Getpid,
		"Getppid":             os.Getppid,
		"Getuid":              os.Getuid,
		"Getwd":               os.Getwd,
		"Hostname":            os.Hostname,
		"Interrupt":           os.Interrupt,
		"IsExist":             os.IsExist,
		"IsNotExist":          os.IsNotExist,
		"IsPathSeparator":     os.IsPathSeparator,
		"IsPermission":        os.IsPermission,
		"IsTimeout":           os.IsTimeout,
		"Kill":                os.Kill,
		"Lchown":              os.Lchown,
		"Link":                os.Link,
		"LookupEnv":           os.LookupEnv,
		"Lstat":               os.Lstat,
		"Mkdir":               os.Mkdir,
		"MkdirAll":            os.MkdirAll,
		"MkdirTemp":           os.MkdirTemp,
		"ModeAppend":          os.ModeAppend,
		"ModeCharDevice":      os.ModeCharDevice,
		"ModeDevice":          os.ModeDevice,
		"ModeDir":             os.ModeDir,
		"ModeExclusive":       os.ModeExclusive,
		"ModeIrregular":       os.ModeIrregular,
		"ModeNamedPipe":       os.ModeNamedPipe,
		"ModePerm":            os.ModePerm,
		"ModeSetgid":          os.ModeSetgid,
		"ModeSetuid":          os.ModeSetuid,
		"ModeSocket":          os.ModeSocket,
		"ModeSticky":          os.ModeSticky,
		"ModeSymlink":         os.ModeSymlink,
		"ModeTemporary":       os.ModeTemporary,
		"ModeType":            os.ModeType,
		"NewFile":             os.NewFile,
		"NewSyscallError":     os.NewSyscallError,
		"O_APPEND":            os.O_APPEND,
		"O_CREATE":            os.O_CREATE,
		"O_EXCL":              os.O_EXCL,
		"O_RDONLY":            os.O_RDONLY,
		"O_RDWR":              os.O_RDWR,
		"O_SYNC":              os.O_SYNC,
		"O_TRUNC":             os.O_TRUNC,
		"O_WRONLY":            os.O_WRONLY,
		"Open":                os.Open,
		"OpenFile":            os.OpenFile,
		"OpenInRoot":          os.OpenInRoot,
		"OpenRoot":            os.OpenRoot,
		"PathListSeparator":   os.PathListSeparator,
		"PathSeparator":       os.PathSeparator,
		"Pipe":                os.Pipe,
		"ReadDir":             os.ReadDir,
		"ReadFile":            os.ReadFile,
		"Readlink":            os.Readlink,
		"Remove":              os.Remove,
		"RemoveAll":           os.RemoveAll,
		"Rename":              os.Rename,
		"SEEK_CUR":            os.SEEK_CUR,
		"SEEK_END":            os.SEEK_END,
		"SEEK_SET":            os.SEEK_SET,
		"SameFile":            os.SameFile,
		"Setenv":              os.Setenv,
		"StartProcess":        os.StartProcess,
		"Stat":                os.Stat,
		"Stderr":              os.Stderr,
		"Stdin":               os.Stdin,
		"Stdout":              os.Stdout,
		"Symlink":             os.Symlink,
		"TempDir":             os.TempDir,
		"Truncate":            os.Truncate,
		"Unsetenv":            os.Unsetenv,
		"UserCacheDir":        os.UserCacheDir,
		"UserConfigDir":       os.UserConfigDir,
		"UserHomeDir":         os.UserHomeDir,
		"WriteFile":           os.WriteFile,
		"DirEntry":            reflect.TypeOf((*os.DirEntry)(nil)).Elem(),
		"File":                reflect.TypeOf((*os.File)(nil)).Elem(),
		"FileInfo":            reflect.TypeOf((*os.FileInfo)(nil)).Elem(),
		"FileMode":            reflect.TypeOf((*os.FileMode)(nil)).Elem(),
		"LinkError":           reflect.TypeOf((*os.LinkError)(nil)).Elem(),
		"PathError":           reflect.TypeOf((*os.PathError)(nil)).Elem(),
		"ProcAttr":            reflect.TypeOf((*os.ProcAttr)(nil)).Elem(),
		"Process":             reflect.TypeOf((*os.Process)(nil)).Elem(),
		"ProcessState":        reflect.TypeOf((*os.ProcessState)(nil)).Elem(),
		"Root":                reflect.TypeOf((*os.Root)(nil)).Elem(),
		"Signal":              reflect.TypeOf((*os.Signal)(nil)).Elem(),
		"SyscallError":        reflect.TypeOf((*os.SyscallError)(nil)).Elem(),
	})
}
