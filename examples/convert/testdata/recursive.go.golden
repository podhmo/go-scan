// Code generated by convert. DO NOT EDIT.
package recursive

import (
	"context"
	"errors"

	destination "example.com/m/destination"
	source "example.com/m/source"
	"github.com/podhmo/go-scan/examples/convert/model"
)

func convertSrcParentToDstParent(ctx context.Context, ec *model.ErrorCollector, src *source.SrcParent) *destination.DstParent {
	if src == nil {
		return nil
	}
	dst := &destination.DstParent{}
	if ec.MaxErrorsReached() {
		return dst
	}
	ec.Enter("ID")
	dst.ID = src.ID

	ec.Leave()
	if ec.MaxErrorsReached() {
		return dst
	}
	ec.Enter("Child")
	dst.Child = *convertSrcChildToDstChild(ctx, ec, &src.Child)

	ec.Leave()
	return dst
}

// ConvertSrcParentToDstParent converts source.SrcParent to destination.DstParent.
//
// Fields that are not populated by this converter:
//
//	(all fields are populated)
func ConvertSrcParentToDstParent(ctx context.Context, src *source.SrcParent) (*destination.DstParent, error) {
	if src == nil {
		return nil, nil
	}
	ec := model.NewErrorCollector(0)
	dst := convertSrcParentToDstParent(ctx, ec, src)
	if ec.HasErrors() {
		return dst, errors.Join(ec.Errors()...)
	}
	return dst, nil
}
func convertSrcChildToDstChild(ctx context.Context, ec *model.ErrorCollector, src *source.SrcChild) *destination.DstChild {
	if src == nil {
		return nil
	}
	dst := &destination.DstChild{}
	if ec.MaxErrorsReached() {
		return dst
	}
	ec.Enter("Value")
	dst.Value = src.Value

	ec.Leave()
	return dst
}

// ConvertSrcChildToDstChild converts source.SrcChild to destination.DstChild.
//
// Fields that are not populated by this converter:
//
//	(all fields are populated)
func ConvertSrcChildToDstChild(ctx context.Context, src *source.SrcChild) (*destination.DstChild, error) {
	if src == nil {
		return nil, nil
	}
	ec := model.NewErrorCollector(0)
	dst := convertSrcChildToDstChild(ctx, ec, src)
	if ec.HasErrors() {
		return dst, errors.Join(ec.Errors()...)
	}
	return dst, nil
}
