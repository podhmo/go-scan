// Code generated by derivingjson. DO NOT EDIT.

package simple

import (
	"encoding/json"
	"fmt"
)

func (c *Container) UnmarshalJSON(data []byte) error {
	var discriminator struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &discriminator); err != nil {
		return fmt.Errorf("failed to unmarshal discriminator: %w", err)
	}

	c.Type = discriminator.Type

	// Unmarshal the rest of the fields based on the type
	var rawContent json.RawMessage
	var temp struct {
		Content *json.RawMessage `json:"content"`
		OtherContent *Other `json:"other_content"`
	}
	if err := json.Unmarshal(data, &temp); err != nil {
		return fmt.Errorf("failed to unmarshal common fields: %w", err)
	}
	if temp.Content != nil {
		rawContent = *temp.Content
	}
	if temp.OtherContent != nil {
		c.OtherContent = *temp.OtherContent
	}


	switch discriminator.Type {
	case "circle":
		var content Circle
		if err := json.Unmarshal(rawContent, &content); err != nil {
			return fmt.Errorf("failed to unmarshal content as Circle: %w", err)
		}
		c.Content = content
	case "rectangle":
		var content Rectangle
		if err := json.Unmarshal(rawContent, &content); err != nil {
			return fmt.Errorf("failed to unmarshal content as Rectangle: %w", err)
		}
		c.Content = content
	default:
		return fmt.Errorf("unknown type: %s", discriminator.Type)
	}
	return nil
}
