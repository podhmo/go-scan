// Code generated by convert. DO NOT EDIT.
package main

import (
	"context"
	"errors"
	"fmt"

	convutil "example.com/m/convutil"
	destination "example.com/m/sampledata/destination"
	"example.com/m/sampledata/funcs"
	source "example.com/m/sampledata/source"
	"github.com/podhmo/go-scan/examples/convert/model"
)

// convertSrcUserToDstUser converts source.SrcUser to destination.DstUser.
func convertSrcUserToDstUser(ctx context.Context, ec *model.ErrorCollector, src *source.SrcUser) *destination.DstUser {
	if src == nil {
		return nil
	}
	dst := &destination.DstUser{}
	if ec.MaxErrorsReached() {
		return dst
	}
	ec.Enter("UserID")
	dst.UserID = src.ID

	ec.Leave()
	if ec.MaxErrorsReached() {
		return dst
	}
	ec.Enter("Address")
	dst.Address = *convertSrcAddressToDstAddress(ctx, ec, &src.Address)

	ec.Leave()
	if ec.MaxErrorsReached() {
		return dst
	}
	ec.Enter("Contact")
	dst.Contact = funcs.ConvertSrcContactToDstContact(ctx, ec, src.ContactInfo)

	ec.Leave()
	if ec.MaxErrorsReached() {
		return dst
	}
	ec.Enter("Details")
	{
		convertedSlice := make([]destination.DstInternalDetail, len(src.Details))
		for i, item := range src.Details {
			ec.Enter(fmt.Sprintf("[%d]", i))
			convertedSlice[i] = *convertSrcInternalDetailToDstInternalDetail(ctx, ec, &item)
			ec.Leave()
		}
		dst.Details = convertedSlice
	}

	ec.Leave()
	if ec.MaxErrorsReached() {
		return dst
	}
	ec.Enter("CreatedAt")
	dst.CreatedAt = convutil.TimeToString(ctx, ec, src.CreatedAt)

	ec.Leave()
	if ec.MaxErrorsReached() {
		return dst
	}
	ec.Enter("UpdatedAt")
	dst.UpdatedAt = convutil.PtrTimeToString(ctx, ec, src.UpdatedAt)

	ec.Leave()
	if ec.MaxErrorsReached() {
		return dst
	}
	ec.Enter("FullName")
	dst.FullName = funcs.MakeFullName(src.FirstName, src.LastName)
	ec.Leave()
	return dst
}

// ConvertSrcUserToDstUser converts source.SrcUser to destination.DstUser.
func ConvertSrcUserToDstUser(ctx context.Context, src *source.SrcUser) (*destination.DstUser, error) {
	if src == nil {
		return nil, nil
	}
	ec := model.NewErrorCollector(0)
	dst := convertSrcUserToDstUser(ctx, ec, src)
	if ec.HasErrors() {
		return dst, errors.Join(ec.Errors()...)
	}
	return dst, nil
}
