// Code generated by minigo-gen-bindings. DO NOT EDIT.

package os

import (
	"os"

	"github.com/podhmo/go-scan/minigo"
)

// Install binds all exported symbols from the "os" package to the interpreter.
func Install(interp *minigo.Interpreter) {
	interp.Register("os", map[string]any{
		"IsPathSeparator":   os.IsPathSeparator,
		"PathListSeparator": os.PathListSeparator,
		"ModeDevice":        os.ModeDevice,
		"ModeSocket":        os.ModeSocket,
		"ModeIrregular":     os.ModeIrregular,
		"Expand":            os.Expand,
		"IsNotExist":        os.IsNotExist,
		"WriteFile":         os.WriteFile,
		"PathSeparator":     os.PathSeparator,
		"ModePerm":          os.ModePerm,
		"Unsetenv":          os.Unsetenv,
		"IsPermission":      os.IsPermission,
		"Pipe":              os.Pipe,
		"ModeSymlink":       os.ModeSymlink,
		"Environ":           os.Environ,
		"TempDir":           os.TempDir,
		"UserCacheDir":      os.UserCacheDir,
		"UserHomeDir":       os.UserHomeDir,
		"Truncate":          os.Truncate,
		"Stat":              os.Stat,
		"Lstat":             os.Lstat,
		"ModeDir":           os.ModeDir,
		"FindProcess":       os.FindProcess,
		"Lchown":            os.Lchown,
		"ModeNamedPipe":     os.ModeNamedPipe,
		"OpenFile":          os.OpenFile,
		"Link":              os.Link,
		"Hostname":          os.Hostname,
		"Getpagesize":       os.Getpagesize,
		"StartProcess":      os.StartProcess,
		"ExpandEnv":         os.ExpandEnv,
		"Getuid":            os.Getuid,
		"Geteuid":           os.Geteuid,
		"Exit":              os.Exit,
		"Open":              os.Open,
		"Rename":            os.Rename,
		"DirFS":             os.DirFS,
		"ReadDir":           os.ReadDir,
		"Getppid":           os.Getppid,
		"Getenv":            os.Getenv,
		"Getgroups":         os.Getgroups,
		"Create":            os.Create,
		"UserConfigDir":     os.UserConfigDir,
		"Chmod":             os.Chmod,
		"Remove":            os.Remove,
		"LookupEnv":         os.LookupEnv,
		"Getgid":            os.Getgid,
		"Symlink":           os.Symlink,
		"Chown":             os.Chown,
		"Getwd":             os.Getwd,
		"MkdirAll":          os.MkdirAll,
		"OpenRoot":          os.OpenRoot,
		"SEEK_SET":          os.SEEK_SET,
		"CreateTemp":        os.CreateTemp,
		"O_RDONLY":          os.O_RDONLY,
		"ModeAppend":        os.ModeAppend,
		"ModeTemporary":     os.ModeTemporary,
		"ModeSetuid":        os.ModeSetuid,
		"ModeCharDevice":    os.ModeCharDevice,
		"ModeSticky":        os.ModeSticky,
		"Executable":        os.Executable,
		"IsTimeout":         os.IsTimeout,
		"Getegid":           os.Getegid,
		"NewFile":           os.NewFile,
		"OpenInRoot":        os.OpenInRoot,
		"O_EXCL":            os.O_EXCL,
		"SEEK_END":          os.SEEK_END,
		"DevNull":           os.DevNull,
		"MkdirTemp":         os.MkdirTemp,
		"O_APPEND":          os.O_APPEND,
		"O_SYNC":            os.O_SYNC,
		"Getpid":            os.Getpid,
		"Setenv":            os.Setenv,
		"RemoveAll":         os.RemoveAll,
		"Chtimes":           os.Chtimes,
		"SameFile":          os.SameFile,
		"O_CREATE":          os.O_CREATE,
		"O_TRUNC":           os.O_TRUNC,
		"O_RDWR":            os.O_RDWR,
		"SEEK_CUR":          os.SEEK_CUR,
		"ModeType":          os.ModeType,
		"NewSyscallError":   os.NewSyscallError,
		"IsExist":           os.IsExist,
		"Mkdir":             os.Mkdir,
		"Chdir":             os.Chdir,
		"Readlink":          os.Readlink,
		"O_WRONLY":          os.O_WRONLY,
		"ModeExclusive":     os.ModeExclusive,
		"ModeSetgid":        os.ModeSetgid,
		"CopyFS":            os.CopyFS,
		"Clearenv":          os.Clearenv,
		"ReadFile":          os.ReadFile,
	})
}
