
// Code generated by convert. DO NOT EDIT.
package pointers

import (
	"context"
	"fmt"
	context "context"
	fmt "fmt"
)

// ConvertSrcToDst converts Src to Dst.
func ConvertSrcToDst(ctx context.Context, src *Src) (*Dst, error) {
	if src == nil {
		return nil, nil
	}
	dst := &Dst{}
	{
	convertedSlice := make([]*interface{}, len(src.Items))
	for i, item := range src.Items {
		convertedSlice[i] = item // Cannot convert pointer types, element type is nil
	}
	dst.Items = convertedSlice
}
	if src.ItemsPtr != nil {
	tmp := DstItem
	{ conv, err := ConvertSrcItemToDstItem(ctx, &(*src.ItemsPtr)); if err == nil { tmp = *conv } }
	dst.ItemsPtr = &tmp
}
	if src.ItemsPtrPtr != nil {
	tmp := *interface{}
	tmp = (*src.ItemsPtrPtr) // Cannot convert pointer types, element type is nil
	dst.ItemsPtrPtr = &tmp
}
	return dst, nil // TODO: error handling
}
// ConvertSrcItemToDstItem converts SrcItem to DstItem.
func ConvertSrcItemToDstItem(ctx context.Context, src *SrcItem) (*DstItem, error) {
	if src == nil {
		return nil, nil
	}
	dst := &DstItem{}
	dst.Value = src.Value
	return dst, nil // TODO: error handling
}
