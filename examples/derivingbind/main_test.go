package main

import (
	"context"
	"go/format"
	"strings"
	"testing"

	"github.com/google/go-cmp/cmp"
	goscan "github.com/podhmo/go-scan"
	"github.com/podhmo/go-scan/scanner"
	"github.com/podhmo/go-scan/scantest"
)

func TestGenerate(t *testing.T) {
	type want struct {
		Code string
	}
	cases := []struct {
		name  string
		files map[string]string
		want  want
	}{
		{
			name: "simple",
			files: map[string]string{
				"go.mod": `
module github.com/podhmo/go-scan/examples/derivingbind/testdata/simple
go 1.22.4
`,
				"models.go": `
package models
// @derivng:binding
type Input struct {
	Name string ` + "`in:\"query\" query:\"name\"`" + `
}
`,
			},
			want: want{
				Code: `
// Code generated by go-scan for package models. DO NOT EDIT.

package models

import (
	"errors"
	"github.com/podhmo/go-scan/examples/derivingbind/parser"
	"net/http"
)

func (ob *Input) Bind(r *http.Request) (err error) {
	var errs []error
	if v, err := parser.String(r.URL.Query()["name"]); err == nil {
		ob.Name = v
	} else {
		errs = append(errs, err)
	}
	return errors.Join(errs...)
}
`,
			},
		},
	}

	for _, tc := range cases {
		t.Run(tc.name, func(t *testing.T) {
			tmpdir, cleanup := scantest.WriteFiles(t, tc.files)
			defer cleanup()

			action := func(ctx context.Context, s *goscan.Scanner, pkgs []*scanner.PackageInfo) error {
				for _, pkg := range pkgs {
					if err := Generate(ctx, s, pkg); err != nil {
						return err
					}
				}
				return nil
			}

			result, err := scantest.Run(t, tmpdir, []string{"."}, action)
			if err != nil {
				t.Fatalf("scantest.Run failed: %+v", err)
			}

			if result == nil {
				t.Fatal("scantest.Run result is nil")
			}
			if len(result.Outputs) != 1 {
				t.Fatalf("unexpected number of outputs, got %d, want 1", len(result.Outputs))
			}

			var got string
			for _, b := range result.Outputs {
				got = string(b)
				break
			}
			formatted, err := format.Source([]byte(got))
			if err != nil {
				t.Fatalf("failed to format generated code: %+v", err)
			}
			if diff := cmp.Diff(strings.TrimSpace(tc.want.Code), strings.TrimSpace(string(formatted))); diff != "" {
				t.Errorf("generated code mismatch (-want +got):\n%s", diff)
			}
		})
	}
}
