package generator

import (
	"context"
	"go/format"
	"path/filepath"
	"strings"
	"testing"

	"example.com/convert/parser"
	"github.com/google/go-cmp/cmp"
	"github.com/podhmo/go-scan"
	"github.com/podhmo/go-scan/scantest"
)

func TestGenerate_CrossPackage(t *testing.T) {
	files := map[string]string{
		"go.mod": `
module example.com/convert
go 1.22.4
`,
		"models/source/source.go": `
package source
import "time"
// @derivingconvert("example.com/convert/models/destination.DstUser")
type SrcUser struct {
	ID        int64
	Name      string
	UpdatedAt *time.Time
}
`,
		"models/destination/destination.go": `
package destination
import "time"
type DstUser struct {
	ID        int64
	Name      string
	UpdatedAt time.Time
}
`,
	}

	tmpdir, cleanup := scantest.WriteFiles(t, files)
	defer cleanup()

	ctx := context.Background()
	s, err := goscan.New(goscan.WithWorkDir(tmpdir))
	if err != nil {
		t.Fatalf("goscan.New failed: %+v", err)
	}

	pkg, err := s.ScanPackage(ctx, filepath.Join(tmpdir, "models/source"))
	if err != nil {
		t.Fatalf("s.ScanPackage failed: %+v", err)
	}

	pairs, err := parser.Parse(ctx, pkg, s)
	if err != nil {
		t.Fatalf("parser.Parse failed: %+v", err)
	}

	got, err := Generate("converter", pairs, pkg)
	if err != nil {
		t.Fatalf("Generate failed: %+v", err)
	}

	want := `// Code generated by go-scan for package converter. DO NOT EDIT.

package converter

import (
	"context"
	destination "example.com/convert/models/destination"
	source "example.com/convert/models/source"
)

// ConvertSrcUserToDstUser converts SrcUser to DstUser.
func ConvertSrcUserToDstUser(ctx context.Context, src source.SrcUser) (destination.DstUser, error) {
	// In the future, this will use an error collector.
	// For now, we just call the internal function.
	dst := convertSrcUserToDstUser(ctx, src)
	return dst, nil
}

// convertSrcUserToDstUser is the internal conversion function.
func convertSrcUserToDstUser(ctx context.Context, src source.SrcUser) destination.DstUser {
	dst := destination.DstUser{}
	dst.ID = src.ID
	dst.Name = src.Name
	if src.UpdatedAt != nil {
		dst.UpdatedAt = *src.UpdatedAt
	}
	return dst
}
`

	formattedGot, err := format.Source(got)
	if err != nil {
		t.Logf("failed to format generated code: %+v\n--- raw output ---\n%s", err, string(got))
		formattedGot = got
	}

	formattedWant, err := format.Source([]byte(want))
	if err != nil {
		t.Fatalf("failed to format want code: %+v\n--- raw output ---\n%s", err, want)
	}

	if diff := cmp.Diff(strings.TrimSpace(string(formattedWant)), strings.TrimSpace(string(formattedGot))); diff != "" {
		t.Errorf("generated code mismatch (-want +got):\n%s", diff)
	}
}
