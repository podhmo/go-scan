package generator

import (
	"bytes"
	"fmt"
	"go/format"
	"strings"
	"text/template"

	"example.com/convert/parser"
	"github.com/podhmo/go-scan"
	"github.com/podhmo/go-scan/scanner"
)

const codeTemplate = `// Code generated by go-scan for package {{.PackageName}}. DO NOT EDIT.

package {{.PackageName}}

import (
	"context"
	{{- range $alias, $path := .Imports }}
	{{ $alias }} "{{ $path }}"
	{{- end }}
)

{{ range .Pairs }}
// {{ .ExportedFuncName }} converts {{ .SrcType.Name }} to {{ .DstType.Name }}.
func {{ .ExportedFuncName }}(ctx context.Context, src {{ .SrcType.Qualifier }}) ({{ .DstType.Qualifier }}, error) {
	// In the future, this will use an error collector.
	// For now, we just call the internal function.
	dst := {{ .InternalFuncName }}(ctx, src)
	return dst, nil
}

// {{ .InternalFuncName }} is the internal conversion function.
func {{ .InternalFuncName }}(ctx context.Context, src {{ .SrcType.Qualifier }}) {{ .DstType.Qualifier }} {
	dst := {{ .DstType.Qualifier }}{}

	{{- range .FieldMappings }}
	dst.{{ .DstField }} = src.{{ .SrcField }}
	{{- end }}

	return dst
}
{{ end }}
`

type TemplateData struct {
	PackageName string
	Imports     map[string]string
	Pairs       []TemplatePair
}

type TemplatePair struct {
	ExportedFuncName string
	InternalFuncName string
	SrcType          QualifiedType
	DstType          QualifiedType
	FieldMappings    []FieldMapping
}

type QualifiedType struct {
	Name      string
	Qualifier string
}

type FieldMapping struct {
	SrcField string
	DstField string
}

// Generate generates the Go code for the conversion functions.
func Generate(packageName string, pairs []parser.ConversionPair, pkgInfo *scanner.PackageInfo) ([]byte, error) {
	im := goscan.NewImportManager(packageName)
	im.Add("context", "context") // Ensure context is always imported

	templatePairs := make([]TemplatePair, 0, len(pairs))

	for _, pair := range pairs {
		if pair.SrcType.Struct == nil || pair.DstType.Struct == nil {
			continue // Skip non-struct types
		}

		srcQualifier := im.MustGetQualifier(pair.SrcType.PackageInfo)
		dstQualifier := im.MustGetQualifier(pair.DstType.PackageInfo)

		templatePair := TemplatePair{
			ExportedFuncName: fmt.Sprintf("Convert%sTo%s", pair.SrcType.Name, pair.DstType.Name),
			InternalFuncName: fmt.Sprintf("convert%sTo%s", pair.SrcType.Name, pair.DstType.Name),
			SrcType: QualifiedType{
				Name:      pair.SrcType.Name,
				Qualifier: fmt.Sprintf("%s.%s", srcQualifier, pair.SrcType.Name),
			},
			DstType: QualifiedType{
				Name:      pair.DstType.Name,
				Qualifier: fmt.Sprintf("%s.%s", dstQualifier, pair.DstType.Name),
			},
		}

		// Basic field mapping: match by name
		dstFields := make(map[string]bool)
		for _, field := range pair.DstType.Struct.Fields {
			dstFields[field.Name] = true
		}

		for _, srcField := range pair.SrcType.Struct.Fields {
			if _, exists := dstFields[srcField.Name]; exists {
				// TODO: Check if types are compatible before adding
				templatePair.FieldMappings = append(templatePair.FieldMappings, FieldMapping{
					SrcField: srcField.Name,
					DstField: srcField.Name,
				})
			}
		}
		templatePairs = append(templatePairs, templatePair)
	}

	templateData := TemplateData{
		PackageName: packageName,
		Imports:     im.GetImports(),
		Pairs:       templatePairs,
	}

	tmpl, err := template.New("converter").Parse(strings.TrimSpace(codeTemplate))
	if err != nil {
		return nil, fmt.Errorf("failed to parse template: %w", err)
	}

	var buf bytes.Buffer
	if err := tmpl.Execute(&buf, templateData); err != nil {
		return nil, fmt.Errorf("failed to execute template: %w", err)
	}

	// Format the generated code
	formatted, err := format.Source(buf.Bytes())
	if err != nil {
		// Write buffer to log for debugging if formatting fails
		return nil, fmt.Errorf("failed to format generated code: %w\n---\n%s\n---", err, buf.String())
	}

	return formatted, nil
}
