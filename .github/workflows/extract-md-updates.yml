name: Extract Markdown Updates

on:
  workflow_dispatch:
    inputs:
      pull_request_number:
        description: 'The pull request number to extract markdown files from'
        required: true

jobs:
  extract-md-updates:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      # Step 1: リポジトリをチェックアウト
      - uses: actions/checkout@v4

      # Step 2: Gitのユーザー情報を設定
      - name: Set up Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      # Step 3: 対象PRのベースブランチ名を取得
      - name: Get original PR base branch
        id: pr_info
        env:
          # ghコマンドの実行にはGITHUB_TOKENが必要
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=${{ github.event.inputs.pull_request_number }}
          BASE_BRANCH=$(gh pr view $PR_NUMBER --json baseRefName -q '.baseRefName')
          echo "base_branch=$BASE_BRANCH" >> $GITHUB_OUTPUT

      # Step 4: PRの変更内容（追加・変更・削除・リネーム）を適用
      - name: Apply markdown changes from PR
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.inputs.pull_request_number }}
          REPO: ${{ github.repository }}
        run: |
          set -e
          BASE_BRANCH=${{ steps.pr_info.outputs.base_branch }}

          # 作業の基準として、まずPRのベースブランチをチェックアウトする
          echo "Checking out base branch: ${BASE_BRANCH}"
          git checkout $BASE_BRANCH
          
          # 対象PRのブランチをフェッチし、'pr-branch'という名前でローカルに作成
          echo "Fetching PR branch..."
          git fetch origin pull/$PR_NUMBER/head:pr-branch

          echo "Getting list of modified markdown files from PR #${PR_NUMBER} via GitHub API..."
          # gh apiでPRのファイルリストを取得し、jqで.mdファイルのみにフィルタリング
          # status, filename, previous_filename (リネーム時のみ) を含むJSONオブジェクトのリストを取得
          MODIFIED_FILES_JSON=$(gh api "repos/$REPO/pulls/$PR_NUMBER/files" --paginate -q '[.[] | select(.filename | endswith(".md")) | {status: .status, filename: .filename, previous_filename: .previous_filename}]')
          
          if [ "$(echo "$MODIFIED_FILES_JSON" | jq 'length')" -eq 0 ]; then
            echo "No markdown files were modified in the pull request."
            exit 0
          fi
          
          echo "Applying markdown changes..."
          
          # JSONの各要素をループ処理
          echo "$MODIFIED_FILES_JSON" | jq -c '.[]' | while read -r line; do
            status=$(echo "$line" | jq -r '.status')
            filename=$(echo "$line" | jq -r '.filename')
            # previous_filenameはリネーム以外では 'null' 文字列になる
            previous_filename=$(echo "$line" | jq -r '.previous_filename')

            case "$status" in
              "added" | "modified")
                echo "Applying addition/modification for: ${filename}"
                # 親ディレクトリが存在しない場合に備えて作成
                mkdir -p "$(dirname "${filename}")"
                # 'pr-branch'からファイルを取得
                git checkout pr-branch -- "${filename}"
                ;;
              "removed")
                echo "Applying deletion for: ${filename}"
                # ファイルが存在する場合のみ削除
                if [ -f "${filename}" ]; then
                  rm -f "${filename}"
                fi
                ;;
              "renamed")
                echo "Applying rename from: ${previous_filename} to: ${filename}"
                # 古いファイルを削除
                if [ -f "${previous_filename}" ]; then
                  rm -f "${previous_filename}"
                fi
                # 新しいファイルを取得
                mkdir -p "$(dirname "${filename}")"
                git checkout pr-branch -- "${filename}"
                ;;
              *)
                echo "Unknown status '${status}' for '${filename}'"
                ;;
            esac
          done

      # Step 5: 変更内容を元に新しいプルリクエストを作成
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.CREATE_PULL_REQUEST }}
          commit-message: "docs: extract markdown updates from #${{ github.event.inputs.pull_request_number }}"
          title: "Docs: Extract markdown updates from #${{ github.event.inputs.pull_request_number }}"
          body: "This PR extracts markdown file updates from #${{ github.event.inputs.pull_request_number }}. Original PR: #${{ github.event.inputs.pull_request_number }}"
          branch: "automation/md-updates-${{ github.event.inputs.pull_request_number }}"
          base: ${{ steps.pr_info.outputs.base_branch }}
          delete-branch: true
          labels: "automated-pr, documentation"
